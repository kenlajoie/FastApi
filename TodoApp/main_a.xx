
from typing import Annotated

from sqlalchemy.orm import Session
from fastapi import FastAPI, Depends
import models
from models import Todos
from database import engine, SessionLocal

# from routers import auth, todos, admin, users

app = FastAPI()

models.Base.metadata.create_all(bind=engine)


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/")
async def read_all(db: Annotated[Session, Depends(get_db)]):
    return db.query(Todos).all()

============================

from typing import Annotated

from typing import Annotated

from sqlalchemy.orm import Session
from fastapi import FastAPI, Depends, HTTPException
import models
from models import Todos
from database import engine, SessionLocal

# from routers import auth, todos, admin, users

app = FastAPI()

models.Base.metadata.create_all(bind=engine)


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

db_dependency  =  Annotated[Session, Depends(get_db)]

@app.get("/")
async def read_all(db: db_dependency):
    return db.query(Todos).all()


@app.get("/todo/{todo_id}", status_code=status)
async def read_todo(db: db_dependency, todo_id: int):
    todo_model = db.query(Todos).all()  #can't get filter to work?
    if todo_model is not None:
        return todo_model
    raise HTTPException(status_code=404, detail='Todo not found.')
